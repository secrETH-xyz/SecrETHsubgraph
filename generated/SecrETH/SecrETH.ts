// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DecryptionCalled extends ethereum.Event {
  get params(): DecryptionCalled__Params {
    return new DecryptionCalled__Params(this);
  }
}

export class DecryptionCalled__Params {
  _event: DecryptionCalled;

  constructor(event: DecryptionCalled) {
    this._event = event;
  }

  get cipher(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get shouldStoreDecryption(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class DecryptionReady extends ethereum.Event {
  get params(): DecryptionReady__Params {
    return new DecryptionReady__Params(this);
  }
}

export class DecryptionReady__Params {
  _event: DecryptionReady;

  constructor(event: DecryptionReady) {
    this._event = event;
  }

  get cipher(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class DecryptionReadyIncentivized extends ethereum.Event {
  get params(): DecryptionReadyIncentivized__Params {
    return new DecryptionReadyIncentivized__Params(this);
  }
}

export class DecryptionReadyIncentivized__Params {
  _event: DecryptionReadyIncentivized;

  constructor(event: DecryptionReadyIncentivized) {
    this._event = event;
  }

  get cipher(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get storageFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class JoinNetworkRequest extends ethereum.Event {
  get params(): JoinNetworkRequest__Params {
    return new JoinNetworkRequest__Params(this);
  }
}

export class JoinNetworkRequest__Params {
  _event: JoinNetworkRequest;

  constructor(event: JoinNetworkRequest) {
    this._event = event;
  }

  get newSignerPubKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class SecrETH__allCiphersResult {
  value0: Address;
  value1: BigInt;
  value2: boolean;
  value3: string;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: boolean,
    value3: string,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getCipherOwner(): Address {
    return this.value0;
  }

  getDecryptionInitBlock(): BigInt {
    return this.value1;
  }

  getStoreDecryption(): boolean {
    return this.value2;
  }

  getDecryptedCipher(): string {
    return this.value3;
  }

  getDecryptionStorageFee(): BigInt {
    return this.value4;
  }
}

export class SecrETH extends ethereum.SmartContract {
  static bind(address: Address): SecrETH {
    return new SecrETH("SecrETH", address);
  }

  allCiphers(param0: Bytes): SecrETH__allCiphersResult {
    let result = super.call(
      "allCiphers",
      "allCiphers(bytes32):(address,uint256,bool,string,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new SecrETH__allCiphersResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toString(),
      result[4].toBigInt()
    );
  }

  try_allCiphers(
    param0: Bytes
  ): ethereum.CallResult<SecrETH__allCiphersResult> {
    let result = super.tryCall(
      "allCiphers",
      "allCiphers(bytes32):(address,uint256,bool,string,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SecrETH__allCiphersResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toString(),
        value[4].toBigInt()
      )
    );
  }

  blocksDelay(): BigInt {
    let result = super.call("blocksDelay", "blocksDelay():(uint32)", []);

    return result[0].toBigInt();
  }

  try_blocksDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("blocksDelay", "blocksDelay():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPubKey(): Bytes {
    let result = super.call("getPubKey", "getPubKey():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getPubKey(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getPubKey", "getPubKey():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isSigner(param0: Address): boolean {
    let result = super.call("isSigner", "isSigner(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isSigner(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSigner", "isSigner(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  numSigners(): BigInt {
    let result = super.call("numSigners", "numSigners():(uint32)", []);

    return result[0].toBigInt();
  }

  try_numSigners(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numSigners", "numSigners():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shareGenerationFractions(param0: Bytes, param1: BigInt): Bytes {
    let result = super.call(
      "shareGenerationFractions",
      "shareGenerationFractions(bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBytes();
  }

  try_shareGenerationFractions(
    param0: Bytes,
    param1: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "shareGenerationFractions",
      "shareGenerationFractions(bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  threshold(): BigInt {
    let result = super.call("threshold", "threshold():(uint32)", []);

    return result[0].toBigInt();
  }

  try_threshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("threshold", "threshold():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DecryptCall extends ethereum.Call {
  get inputs(): DecryptCall__Inputs {
    return new DecryptCall__Inputs(this);
  }

  get outputs(): DecryptCall__Outputs {
    return new DecryptCall__Outputs(this);
  }
}

export class DecryptCall__Inputs {
  _call: DecryptCall;

  constructor(call: DecryptCall) {
    this._call = call;
  }

  get cipher(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get shouldStoreDecryption(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class DecryptCall__Outputs {
  _call: DecryptCall;

  constructor(call: DecryptCall) {
    this._call = call;
  }
}

export class JoinNetworkCall extends ethereum.Call {
  get inputs(): JoinNetworkCall__Inputs {
    return new JoinNetworkCall__Inputs(this);
  }

  get outputs(): JoinNetworkCall__Outputs {
    return new JoinNetworkCall__Outputs(this);
  }
}

export class JoinNetworkCall__Inputs {
  _call: JoinNetworkCall;

  constructor(call: JoinNetworkCall) {
    this._call = call;
  }

  get newSignerPubKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class JoinNetworkCall__Outputs {
  _call: JoinNetworkCall;

  constructor(call: JoinNetworkCall) {
    this._call = call;
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get cipher(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }
}

export class SubmitDecryptionCall extends ethereum.Call {
  get inputs(): SubmitDecryptionCall__Inputs {
    return new SubmitDecryptionCall__Inputs(this);
  }

  get outputs(): SubmitDecryptionCall__Outputs {
    return new SubmitDecryptionCall__Outputs(this);
  }
}

export class SubmitDecryptionCall__Inputs {
  _call: SubmitDecryptionCall;

  constructor(call: SubmitDecryptionCall) {
    this._call = call;
  }

  get cipher(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get decryptedCipher(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SubmitDecryptionCall__Outputs {
  _call: SubmitDecryptionCall;

  constructor(call: SubmitDecryptionCall) {
    this._call = call;
  }
}

export class SubmitFractionalDecryptionCall extends ethereum.Call {
  get inputs(): SubmitFractionalDecryptionCall__Inputs {
    return new SubmitFractionalDecryptionCall__Inputs(this);
  }

  get outputs(): SubmitFractionalDecryptionCall__Outputs {
    return new SubmitFractionalDecryptionCall__Outputs(this);
  }
}

export class SubmitFractionalDecryptionCall__Inputs {
  _call: SubmitFractionalDecryptionCall;

  constructor(call: SubmitFractionalDecryptionCall) {
    this._call = call;
  }

  get cipher(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get fractionalDecryption(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SubmitFractionalDecryptionCall__Outputs {
  _call: SubmitFractionalDecryptionCall;

  constructor(call: SubmitFractionalDecryptionCall) {
    this._call = call;
  }
}

export class SubmitShareCall extends ethereum.Call {
  get inputs(): SubmitShareCall__Inputs {
    return new SubmitShareCall__Inputs(this);
  }

  get outputs(): SubmitShareCall__Outputs {
    return new SubmitShareCall__Outputs(this);
  }
}

export class SubmitShareCall__Inputs {
  _call: SubmitShareCall;

  constructor(call: SubmitShareCall) {
    this._call = call;
  }

  get newSignerPubKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get share(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SubmitShareCall__Outputs {
  _call: SubmitShareCall;

  constructor(call: SubmitShareCall) {
    this._call = call;
  }
}
